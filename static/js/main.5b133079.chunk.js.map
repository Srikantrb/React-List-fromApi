{"version":3,"sources":["Components/FirebaseAuth/Fireconfig.js","Components/firebase/FirebaseTesting.js","Components/UserModal.js","Components/User.js","Components/FirebaseAuth/Login.js","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","FirebaseTesting","useState","bookedslots","setbookedslots","htimings","sethtimings","onChange","e","selectedslot","target","value","console","log","updatedslots","map","timing","availabletimings","database","ref","set","then","response","catch","err","on","snapshot","retrivedslots","val","swal","className","year","Date","getFullYear","month","getMonth","day","getDate","UserModal","props","Modal","size","aria-labelledby","centered","Header","closeButton","type","Title","id","Body","name","email","readOnly","User","avatar","first_name","last_name","onclick","showusermodal","setShowusermodal","src","alt","onClick","show","onHide","Login","setEmail","password","setPassword","inputHandler","preventDefault","onSubmit","placeholder","auth","signInWithEmailAndPassword","u","code","createUserWithEmailAndPassword","App","users","setUsers","search","setSearch","user","setUser","useEffect","getusersp1","axios","get","getusersp2","all","usersarray","data","error","fetchData","onAuthStateChanged","filtereduserslist","filter","toLowerCase","indexOf","signOut","length","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5b133079.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\n\r\nconst firebaseConfig = {\r\n  //Your fire base config \r\n    apiKey: \"AIzaSyBGoznrRbAupSuE489FCzHbaMjX7syG0qM\",\r\n    authDomain: \"slot-booking-2c594.firebaseapp.com\",\r\n    databaseURL: \"https://slot-booking-2c594.firebaseio.com\",\r\n    projectId: \"slot-booking-2c594\",\r\n    storageBucket: \"slot-booking-2c594.appspot.com\",\r\n    messagingSenderId: \"583285963978\",\r\n    appId: \"1:583285963978:web:592fd416d41eb5ee0f4833\",\r\n    measurementId: \"G-EGG7F8NY6E\"\r\n    \r\n  };\r\n\r\nconst fire = firebase.initializeApp(firebaseConfig)\r\n// const db = fire.database();\r\n// export default db;\r\nexport default fire;\r\n\r\n\r\n ","import React, { useState } from 'react'\r\nimport fire from '../FirebaseAuth/Fireconfig'\r\nimport swal from 'sweetalert';\r\n\r\nfunction FirebaseTesting() {\r\n    const [bookedslots,setbookedslots] =useState([])\r\n    const timings = {\r\n        timings : [\r\n                    \"9-10\",\"10-11\",\"11-12\",\r\n                    \"13-14\",\"14-15\",\"15-16\"\r\n                  ],\r\n        availabletimings : [\r\n                    \"9-10\",\"10-11\",\"11-12\",\r\n                    \"13-14\",\"14-15\",\"15-16\"\r\n                            ],\r\n        bookedtimings : [\r\n\r\n                    ]\r\n    }\r\n\r\n    const slots = [\r\n        \"9-10\",\"10-11\",\"11-12\",\r\n        \"13-14\",\"14-15\",\"15-16\"\r\n    ]\r\n    const [htimings,sethtimings] = useState(slots)\r\n    // const [slotcolor,setslotcolor] =useState(\"color1\")\r\n   //////////\r\n    // const data = {\r\n    //     employees : [\r\n    //         {\r\n    //             employee : \"Navd\",\r\n    //             salary : 20000,\r\n    //             id : \"CS2012001\"\r\n    //         },\r\n    //         {\r\n    //             employee : \"Gets\",\r\n    //             salary : 10000,\r\n    //             id : \"CS2012002\"\r\n    //         },\r\n    //         {\r\n    //             employee : \"Sed\",\r\n    //             salary : 25000,\r\n    //             id : \"CS2012003\"\r\n    //         }\r\n    //     ],\r\n    //     departments : [\r\n    //         {\r\n    //             departmentid : \"CS\",\r\n    //             departmentname : \"CSE\"\r\n    //         },\r\n    //         {\r\n    //             departmentid : \"ME\",\r\n    //             departmentname : \"MECHANICS\"\r\n    //         }\r\n    //     ]\r\n    // };\r\n//\r\n    // const dataupload = () =>{\r\n    //     fire.database().ref().set(data)\r\n    //     .then((response) =>{\r\n    //         console.log(\"Data uploaded Sucessfully\")\r\n    //     })\r\n    //     .catch((err)=>{\r\n    //         console.log(err)\r\n    //     });\r\n\r\n    //     fire.database().ref().set(timings).then((response)=>console.log(response))\r\n    //     .catch((err)=>console.log(err));\r\n    //     // fire.database().ref().set()\r\n    // }\r\n    // const dataupdate = () =>{\r\n    //     fire.database().ref('employees/2').update({\r\n    //         employee : \"Sedg\",\r\n    //         salary : 21000\r\n    //     })\r\n    //     fire.database().ref('departments/0/departmentname').set(null).then(()=> console.log(\"Succes\")).catch((err)=>console.log(err))\r\n    // }\r\n\r\n    const handleslotbook = ()=>{\r\n\r\n    }\r\n    const handleslotChange =(e)=>{\r\n        var selectedslot = e.target.value\r\n        console.log(selectedslot)\r\n        const updatedslots = htimings.map((timing) =>{\r\n            if(selectedslot !==timing){\r\n                return timing\r\n            }else{\r\n                return null\r\n            }\r\n        })\r\n        console.log(updatedslots)\r\n        // sethtimings(updatedslots)\r\n        const availabletimings = updatedslots;\r\n        fire.database().ref('availabletimings').set(availabletimings).then((response)=>console.log(response))\r\n        .catch((err)=>console.log(err));\r\n       //retriving avilable slots from database\r\n        fire.database().ref().on('value',\r\n        (snapshot)=>{\r\n            const data = snapshot.val()\r\n            const retrivedslots = data.availabletimings\r\n            console.log(retrivedslots);\r\n            sethtimings(retrivedslots)\r\n            \r\n        }\r\n        );\r\n        setbookedslots([selectedslot,...bookedslots])\r\n        console.log(bookedslots)\r\n        ///setting booked slots\r\n        fire.database().ref('bookedtimings').set(bookedslots).then((response)=>console.log(response))\r\n        .catch((err)=>console.log(err));\r\n        // alert(e.target.value + \" slot booked succesfully\")\r\n        swal(selectedslot + \" Slot Booked\",\"Success\",\"success\")\r\n    }\r\n\r\n    /////////////////\r\n    return (\r\n        <div>\r\n            {/* <button onClick = {dataupload}>Upload</button> \r\n            <button onClick = {dataupdate}>Update</button> */}\r\n            <select onChange = {handleslotChange} className = \"selection\">\r\n                <option className = \"option\">--Select Slot--</option>\r\n                {htimings.map((timing) =>(\r\n                    <option >{timing}</option>\r\n                ))}\r\n            </select>\r\n            {/* <button onClick ={handleslotbook}>Book</button>   */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FirebaseTesting\r\n","import React,{useState} from 'react'\r\nimport {Modal,Button,Row,Col,Form} from 'react-bootstrap'\r\nimport moment from 'moment'\r\nimport ReactTimeslotCalendar from 'react-timeslot-calendar'\r\nimport '../Css/UserModal.css'\r\nimport FirebaseTesting from '../Components/firebase/FirebaseTesting'\r\n\r\nconst year = new Date().getFullYear(); \r\nconst month = new Date().getMonth();\r\nconst day = new Date().getDate();\r\n\r\nfunction UserModal(props) {\r\n    // const [slot,setSlot] = useState([])\r\n    // const handlesubmit = (event) => {\r\n    //     event.preventDefault()\r\n    //     console.log(\"Hello\")\r\n    //     console.log(event.current.value)  \r\n    // }\r\n    let onSelectTimeslot = (allTimeslots, lastSelectedTimeslot) => {\r\n        /**\r\n         * All timeslot objects include `startDate` and `endDate`.\r\n      \r\n         * It is important to note that if timelots provided contain a single\r\n         * value (e.g: timeslots = [['8'], ['9', '10']) then only `startDate` is filled up with\r\n         * the desired information.\r\n         */\r\n        console.log(lastSelectedTimeslot.startDate); // MomentJS object.\r\n      \r\n      }\r\n    \r\n    return (\r\n        <div>\r\n            <Modal\r\n                {...props}\r\n                size=\"lg\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                className = \"modal\"\r\n            >\r\n                <Modal.Header closeButton className = {props.type} className= \"modalheader\">\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\" >\r\n                    Person Bio\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                \r\n                <Modal.Body >\r\n                    <div className = \"modalbody\">\r\n                        <div className = \"modalfield\">\r\n                            <label className = \"modallable\">Name : </label>\r\n                            <p>{props.name}</p>\r\n                        </div>\r\n                        <div className =\"modalfield\">\r\n                            <label className = \"modallable\">Email : </label>\r\n                            <p>{props.email}</p>\r\n                        </div>\r\n                        <hr></hr>\r\n                        <div className = \"calander\">\r\n                          {/* <ReactTimeslotCalendar\r\n                            initialDate={moment().format()}\r\n                            // onTimeslotClick = {setSlot(selectedTimeslots)}\r\n                            onSelectTimeslot={onSelectTimeslot}\r\n                            \r\n                          /> */}\r\n                          <div className = \"input-container\">\r\n                            <input type=\"text\" readOnly value = {year} className = \"input\"></input>\r\n                            <input type=\"text\" readOnly value = {month} className = \"input\"></input>\r\n                            <input type = \"text\" readOnly value = {day} className = \"input\"></input>\r\n                          </div>\r\n                          <FirebaseTesting></FirebaseTesting>\r\n                        </div>\r\n                    </div>\r\n                </Modal.Body>\r\n                {/* <Modal.Footer>\r\n                    <Button variant = \"danger\" onClick={props.onHide}>Close</Button>\r\n                </Modal.Footer> */}\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default UserModal\r\n","import React, { useState } from 'react'\r\nimport '../Css/User.css'\r\nimport UserModal from './UserModal'\r\n\r\n\r\nfunction User({avatar,email,first_name,id,last_name,onclick}) {\r\n    const[showusermodal,setShowusermodal] = useState(false)\r\n    const name = first_name + \" \" + last_name;\r\n    \r\n    let modalClose = () => setShowusermodal(false);\r\n    const handleimgclick = () =>{\r\n        setShowusermodal(true)\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className = \"user_container\">\r\n            <img className = \"user_img\" \r\n            src = {avatar} \r\n            alt = \"Profile_img\"\r\n            onClick = {handleimgclick}\r\n            ></img>\r\n            <h3>{first_name}{\" \" + last_name}</h3>\r\n            <div>\r\n            <UserModal \r\n                name = {name}\r\n                email = {email}\r\n                show = {showusermodal}\r\n                onHide = {modalClose}\r\n            ></UserModal>\r\n      </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User\r\n","import React, { useState } from 'react'\r\nimport fire from './Fireconfig'\r\nimport swal from 'sweetalert';\r\n\r\nfunction Login() {\r\n   \r\n    const [email,setEmail] = useState(\"\")\r\n    const [password,setPassword] = useState(\"\")\r\n\r\n    const inputHandler = (e) =>{\r\n        e.preventDefault();\r\n        if(e.target.name == \"email\"){\r\n            setEmail(e.target.value)\r\n        }else{\r\n            setPassword(e.target.value)\r\n        }\r\n    }\r\n    const submitHandler = (e) =>{\r\n        e.preventDefault();\r\n    }\r\n    const loginHandler = () =>{\r\n        fire.auth().signInWithEmailAndPassword(email,password).then((u)=>{\r\n            console.log(u)\r\n            swal(\"Sign in success\",\"welcome\",\"success\")\r\n        }).catch((err)=>{\r\n            console.log(err)\r\n            if(err.code == \"auth/network-request-failed\"){\r\n                swal(\"Oops...\",\"Please check your Connection\",\"error\")\r\n            }else if(err.code == \"auth/wrong-password\"){\r\n                swal(\"Oops...\",\"Please check your password!\",\"error\")\r\n            }else if(err.code == \"auth/user-not-found\"){\r\n                swal(\"Oops...\",\"User not found\",\"error\")\r\n            }\r\n        })\r\n    }\r\n    const signupHandler = () =>{\r\n        fire.auth().createUserWithEmailAndPassword(email,password).then((u)=>{\r\n            console.log(u)\r\n            swal(\"Sign Up success\",\"welcome\",\"success\")\r\n        }).catch((err)=>{\r\n            console.log(err)\r\n            if(err.code == \"auth/network-request-failed\"){\r\n                swal(\"Oops...\",\"Please check your Connection\",\"error\")\r\n            }\r\n            else if(err.code == \"auth/email-already-in-use\"){\r\n                swal(\"Oops...\",\"email-already-in-use\",\"error\") \r\n            }\r\n            else if(err.code == \"auth/weak-password\"){\r\n                swal(\"Oops...\",\"Weak Password\",\"error\")\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit = {submitHandler}>\r\n                <input \r\n                name= \"email\" \r\n                type = \"text\"\r\n                placeholder = \"Enter your Mail\"\r\n                value = {email}\r\n                onChange = {inputHandler}\r\n                ></input>\r\n                <input \r\n                name= \"password\" \r\n                type = \"password\"\r\n                placeholder = \"Enter Your Password\"\r\n                value = {password}\r\n                onChange = {inputHandler}\r\n                ></input>\r\n                <div>\r\n                    <button type = \"submit\" onClick = {loginHandler}>LogIn</button>\r\n                    <button type = \"submit\" onClick ={signupHandler}>SignUp</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport User from './Components/User';\nimport axios from 'axios'\nimport fire from './Components/FirebaseAuth/Fireconfig';\nimport Login from './Components/FirebaseAuth/Login';\nimport FirebaseTesting from './Components/firebase/FirebaseTesting';\n\n\nfunction App() {\n  const[users,setUsers] = useState([]);\n  const [search,setSearch] = useState(\"\")\n  \n  // fire base authentication\n  const[user,setUser] = useState({})\n   \n  const authenticate = ()=>{\n      fire.auth().onAuthStateChanged((user)=>{\n          if(user){\n              setUser({user})\n          }else{\n              setUser(null)\n          }\n      })\n  }\n\n  // To fetch Data from an Api\n  const fetchData = () =>{\n    const userspage1 = \"https://reqres.in/api/users?page=1\"\n    const userspage2 = \"https://reqres.in/api/users?page=2\"\n    const getusersp1 = axios.get(userspage1)\n    const getusersp2 = axios.get(userspage2)\n    axios.all([getusersp1,getusersp2])\n    .then(response =>{\n      const usersarray = [...response[0].data.data,...response[1].data.data]\n      console.log(usersarray)\n      setUsers(usersarray)\n    }\n    ).catch(error =>{\n      console.log(error)\n    });\n  }\n\n  useEffect(()=>{\n    fetchData()\n    authenticate()\n  },[])\n  // To filter the users List (Search Engine)\n  const filtereduserslist = users.filter((user) =>{ \n\n    return (user.first_name.toLowerCase().indexOf(search.toLowerCase()) !== -1 \n      || user.last_name.toLowerCase().indexOf(search.toLowerCase()) !== -1\n    )\n  })\n  // Logout,Login Button Handler\n  const logoutHandler = (e) =>{\n    e.preventDefault();\n    fire.auth().signOut()\n    // setIslogedin(false)\n  }\n  \n  return (\n    <div className=\"App\">\n      {/* <FirebaseTesting></FirebaseTesting> */}\n      <div className = \"auth-buttons\">\n        {user ? (<button onClick = {logoutHandler }>LogOut</button>) : null}\n        {/* {user ? (<firebaseTesting></firebaseTesting>) : null} */}\n      </div>\n      <div>\n        {user ? \n        (<div>\n        <input className = \"searchfield\" placeholder = \"Search Here...\" value = {search} onChange = {(e) => setSearch(e.target.value)}></input>\n        <div className = \"userslist\">\n          {\n            filtereduserslist.length ?\n            filtereduserslist.map(\n              (({avatar,email,first_name,id,last_name}) =>\n                <User\n                  key = {id} \n                  avatar = {avatar}\n                  email = {email}\n                  first_name = {first_name}\n                  id = {id}\n                  last_name = {last_name}\n                />\n              )\n            ) :\n            null     \n          }\n        </div>\n        </div>) : (<Login/>)}\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}